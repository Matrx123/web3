/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimpleContract {
  export type PeopleStruct = { name: string; no: BigNumberish };

  export type PeopleStructOutput = [name: string, no: bigint] & {
    name: string;
    no: bigint;
  };
}

export interface SimpleContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPeople"
      | "getPerson"
      | "makeMapping"
      | "nameToFavNo"
      | "peoples"
      | "retrieve"
      | "store"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPeople",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerson",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeMapping",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nameToFavNo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "peoples",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "retrieve", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addPeople", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameToFavNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peoples", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
}

export interface SimpleContract extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleContract;
  waitForDeployment(): Promise<this>;

  interface: SimpleContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPeople: TypedContractMethod<
    [_name: string, _no: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPerson: TypedContractMethod<
    [_index: BigNumberish],
    [SimpleContract.PeopleStructOutput],
    "view"
  >;

  makeMapping: TypedContractMethod<
    [_name: string, _no: BigNumberish],
    [void],
    "nonpayable"
  >;

  nameToFavNo: TypedContractMethod<[arg0: string], [bigint], "view">;

  peoples: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; no: bigint }],
    "view"
  >;

  retrieve: TypedContractMethod<[], [bigint], "view">;

  store: TypedContractMethod<[_no: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPeople"
  ): TypedContractMethod<
    [_name: string, _no: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPerson"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [SimpleContract.PeopleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeMapping"
  ): TypedContractMethod<
    [_name: string, _no: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nameToFavNo"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "peoples"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; no: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "store"
  ): TypedContractMethod<[_no: BigNumberish], [void], "nonpayable">;

  filters: {};
}
